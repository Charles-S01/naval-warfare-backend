// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id                String   @id
  Players           Player[]
  playerTurn        String
  playersReadyCount Int      @default(0)
  winner            String?
}

model Player {
  id        String     @id
  name      String?
  game      Game?      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String?
  gameBoard GameBoard?
}

model GameBoard {
  id          String       @id @default(uuid())
  player      Player       @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId    String       @unique
  // Attacks  Coordinate[]
  Ships       Ship[]
  Coordinates Coordinate[]
}

model Ship {
  id          String    @id @default(uuid())
  shipType    ShipType
  length      Int
  hits        Int       @default(0)
  gameBoard   GameBoard @relation(fields: [gameBoardId], references: [id], onDelete: Cascade)
  gameBoardId String
  // Coordinates Coordinate[]

  @@unique([gameBoardId, shipType])
}

model Coordinate {
  id          String     @id @default(uuid())
  row         Int
  col         Int
  // type        CoordType?
  shipType    ShipType?
  isHit       Boolean?
  gameBoard   GameBoard? @relation(fields: [gameBoardId], references: [id], onDelete: Cascade)
  gameBoardId String?
  // ship        Ship?      @relation(fields: [shipId], references: [id], onDelete: Cascade)
  // shipId      String?

  @@unique([gameBoardId, row, col])
}

// enum CoordType {
//   HIT
//   MISS
// }

enum ShipType {
  CARRIER
  SUBMARINE
  DESTROYER
}
